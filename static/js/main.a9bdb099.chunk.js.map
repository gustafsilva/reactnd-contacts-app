{"version":3,"sources":["Components/Contact.js","Components/ListContacts.js","App.js","registerServiceWorker.js","index.js"],"names":["Contact","props","contact","onDeleteContact","react_default","a","createElement","className","style","backgroundImage","concat","avatarURL","name","handle","onClick","ListContacts","state","query","updateQuery","newQuery","_this","setState","clearQuery","contacts","this","map","Components_Contact","key","id","_this2","showingContacts","filter","c","toLowerCase","includes","type","placeholder","value","onChange","event","target","length","renderShowingContacts","Component","App","removeContact","currentState","Components_ListContacts","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oMAkCeA,EA/BC,SAACC,GAAU,IACjBC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,gBAEjB,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACZH,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBACVC,MAAO,CACLC,gBAAe,OAAAC,OAASR,EAAQS,UAAjB,QAInBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAIJ,EAAQU,MACZR,EAAAC,EAAAC,cAAA,SAAIJ,EAAQW,SAEdT,EAAAC,EAAAC,cAAA,UACEQ,QAAS,kBAAMX,EAAgBD,IAC/BK,UAAU,kBAFZ,YCsDSQ,6MA7DbC,MAAQ,CACNC,MAAO,MAGTC,YAAc,SAACC,GACbC,EAAKC,SAAS,CACZJ,MAAOE,OAIXG,WAAa,WACXF,EAAKF,YAAY,0FAGGK,GAAU,IACtBpB,EAAoBqB,KAAKvB,MAAzBE,gBAER,OAAOoB,EAASE,IAAI,SAACvB,GAAD,OAClBE,EAAAC,EAAAC,cAACoB,EAAD,CAASC,IAAKzB,EAAQ0B,GAAI1B,QAASA,EAASC,gBAAiBA,uCAIxD,IAAA0B,EAAAL,KACCP,EAAUO,KAAKR,MAAfC,MACAM,EAAaC,KAAKvB,MAAlBsB,SAGFO,EAA4B,KAAVb,EACpBM,EACAA,EAASQ,OAAO,SAACC,GAAD,OAChBA,EAAEpB,KAAKqB,cAAcC,SAASjB,EAAMgB,iBAGxC,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,kBACV4B,KAAK,OACLC,YAAY,kBACZC,MAAOb,KAAKR,MAAMC,MAClBqB,SAAU,SAACC,GAAD,OAAWV,EAAKX,YAAYqB,EAAMC,OAAOH,WAIrDP,EAAgBW,SAAWlB,EAASkB,QACpCrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,2BAAmBwB,EAAgBW,OAAnC,OAA+ClB,EAASkB,QACxDrC,EAAAC,EAAAC,cAAA,UAAQQ,QAASU,KAAKF,YAAtB,aAIJlB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACXiB,KAAKkB,sBAAsBZ,YA3DXa,aCwCZC,6MAzCb5B,MAAQ,CACNO,SAAU,CACR,CACEK,GAAM,QACNhB,KAAQ,gBACRC,OAAU,gBACVF,UAAa,mCAEf,CACEiB,GAAM,UACNhB,KAAQ,mBACRC,OAAU,kBACVF,UAAa,qCAEf,CACEiB,GAAM,QACNhB,KAAQ,iBACRC,OAAU,gBACVF,UAAa,uCAKnBkC,cAAgB,SAAC3C,GACfkB,EAAKC,SAAS,SAACyB,GAAD,MAAmB,CAC/BvB,SAAUuB,EAAavB,SAASQ,OAAO,SAACC,GAAD,OAAOA,EAAEJ,KAAO1B,EAAQ0B,iFAKjE,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,CACExB,SAAUC,KAAKR,MAAMO,SACrBpB,gBAAiBqB,KAAKqB,wBAnCdF,aCMZK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfwC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,wBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA7C,OAAMkE,wBAAN,sBAEP5B,GAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBkC","file":"static/js/main.a9bdb099.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Contact = (props) => {\n  const { contact, onDeleteContact } = props;\n\n  return (\n    <li className='contact-list-item'>\n      <div\n        className='contact-avatar'\n        style={{\n          backgroundImage: `url(${contact.avatarURL})`\n        }}\n        >\n      </div>\n      <div className='contact-details'>\n        <p>{contact.name}</p>\n        <p>{contact.handle}</p>\n      </div>\n      <button\n        onClick={() => onDeleteContact(contact) }\n        className='contact-remove'\n      >\n        Remove\n      </button>\n    </li>\n  );\n}\n\nContact.propTypes = {\n  contact: PropTypes.object.isRequired,\n  onDeleteContact: PropTypes.func.isRequired\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Contact from './Contact';\n\n\nclass ListContacts extends Component {\n  static propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onDeleteContact: PropTypes.func.isRequired\n  }\n\n  state = {\n    query: ''\n  }\n\n  updateQuery = (newQuery) => {\n    this.setState({\n      query: newQuery\n    });\n  }\n\n  clearQuery = () => {\n    this.updateQuery('');\n  }\n\n  renderShowingContacts(contacts) {\n    const { onDeleteContact } = this.props;\n\n    return contacts.map((contact) => (\n      <Contact key={contact.id} contact={contact} onDeleteContact={onDeleteContact} />\n    ));\n  }\n\n  render() {\n    const { query } = this.state;\n    const { contacts } = this.props;\n\n\n    const showingContacts = query === ''\n      ? contacts\n      : contacts.filter((c) => (\n        c.name.toLowerCase().includes(query.toLowerCase())\n      ))\n    \n    return (\n      <div className='list-contacts'>\n        <div className='list-contacts-top'>\n          <input\n            className='search-contacts'\n            type='text'\n            placeholder='Search Contacts'\n            value={this.state.query}\n            onChange={(event) => this.updateQuery(event.target.value)}\n          />\n        </div>\n\n        { showingContacts.length !== contacts.length && (\n          <div className='showing-contacts'>\n            <span>Now showing {showingContacts.length} of {contacts.length}</span>\n            <button onClick={this.clearQuery }>Show all</button>\n          </div>\n        )}\n\n        <ol className='contact-list'>\n          {this.renderShowingContacts(showingContacts)}\n        </ol>\n      </div>\n    );\n  }\n}\n\n\nexport default ListContacts;\n","import React, { Component } from 'react';\n\nimport ListContacts from './Components/ListContacts';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {\n        \"id\": \"karen\",\n        \"name\": \"Karen Isgrigg\",\n        \"handle\": \"karen_isgrigg\",\n        \"avatarURL\": \"http://localhost:5001/karen.jpg\"\n      },\n      {\n        \"id\": \"richard\",\n        \"name\": \"Richard Kalehoff\",\n        \"handle\": \"richardkalehoff\",\n        \"avatarURL\": \"http://localhost:5001/richard.jpg\"\n      },\n      {\n        \"id\": \"tyler\",\n        \"name\": \"Tyler McGinnis\",\n        \"handle\": \"tylermcginnis\",\n        \"avatarURL\": \"http://localhost:5001/tyler.jpg\"\n      }\n    ]\n  }\n\n  removeContact = (contact) => {\n    this.setState((currentState) => ({\n      contacts: currentState.contacts.filter((c) => c.id !== contact.id)\n    }))\n  }\n\n  render() {\n    return (\n      <div>\n        <ListContacts\n          contacts={this.state.contacts}\n          onDeleteContact={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}